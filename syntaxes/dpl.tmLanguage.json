{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "DPL",
	"patterns": [
		{
			"include": "#structs"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#include-content"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#namespaces"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#generic-bindings"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#storage"
		},
		{
			"name": "variable.other.dpl",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.dpl",
				"match": "\\b(if|else|do|while|for|return|break|continue|loop)\\b"
			},
			{
				"name": "keyword.control.function.dpl",
				"match": "\\b(fn)\\b"
			},
			{
				"name": "keyword.declaration.dpl",
				"match": "\\b(let|const|struct|enum|asm|namespace|spacename)\\b"
			}
		]
		},
		"strings": {
			"name": "string.quoted.double.dpl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.dpl",
					"match": "\\\\."
				}
			]
		},
		"characters": {
			"name": "string.quoted.single.dpl",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.dpl",
					"match": "\\\\."
				}
			],
			"maxLength": 8
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.dpl",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"name": "comment.line.double-slash.dpl",
					"begin": "//",
					"end": "$"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.dpl",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.float.dpl",
					"match": "\\b\\d+\\.\\d+\\b"
				},
				{
					"name": "constant.numeric.dpl",
					"match": "\\b\\d+\\b"
				},
				{
					"name": "constant.numeric.hex.dpl",
					"match": "\\b0[xX][0-9a-fA-F]+\\b"
				},
				{
					"name": "constant.numeric.binary.dpl",
					"match": "\\b0[bB][01]+\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.dpl",
					"match": "\\+|\\-|\\*|\\/|%|\\^|&|~|\\||<|>|=|!|\\.|,|==|!=|<=|>=|&&|\\|\\||\\+\\+|--|<<=|>>=|<<|>>|\\+=|-=|\\*=|/=|%=|&=|\\^=|\\|=|\\^\\^|::"
				}
			]
		},
		"namespaces": {
			"patterns": [
				{
					"match": "(?<=namespace\\s+)([a-zA-Z_][a-zA-Z0-9_]*)\\b",
					"captures": {
						"1": { "name": "entity.name.namespace.dpl" }
					}
				},
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*::",
					"captures": {
						"1": { "name": "entity.name.namespace.dpl" }
					}
				}
			]
		},
		"structs": {
			"patterns": [
				{
					"match": "\\b(struct|enum)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
					"captures": {
						"1": { "name": "keyword.declaration.dpl" },
						"2": { "name": "entity.name.type.struct.dpl" }
					}
				},
				{
					"match": "(?<=:)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*(?:int|float|bool|char|str|void|array)\\b)",
					"captures": {
						"1": { "name": "entity.name.type.struct.dpl" }
					}
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*:<(?:[^<>]|<[^<>]*>)*>\\s*\\()",
					"captures": {
						"1": { "name": "entity.name.function.dpl" }
					}
				},
				{
					"name": "entity.name.function",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
					"captures": {
						"1": { "name": "entity.name.function.dpl" }
					}
				}
			]
		},
		"generic-bindings": {
			"patterns": [
				{
					"name": "meta.generic.dpl",
					"match": "(:)<([^<>]|<[^<>]*>)*>",
					"captures": {
						"1": { "name": "keyword.operator.dpl" },
						"0": { "patterns": [
							{
								"name": "entity.name.type.dpl",
								"match": "\\b(int|float|bool|char|str|void|array)\\b"
							},
							{
								"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
								"name": "entity.name.type.parameter.dpl"
							}
						]}
					}
				}
			]
		},
		"preprocessor": {
			"patterns": [
				{
					"name": "meta.preprocessor.dpl",
					"match": "#(include|define|undef|ifdef|ifndef|if|elif|else|endif|error|print|namespace|spacename)\\b"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "entity.name.type.dpl",
					"match": "\\b(int|float|bool|char|str|void|array)\\b"
				}
			]
		}
		,
		"include-content": {
			"patterns": [
				{
					"name": "string.quoted.other.lt-gt.include.dpl",
					"match": "(?<=#include\\s+)<.*?>"
				}
			]
		}
	},
	"scopeName": "source.dpl"
}